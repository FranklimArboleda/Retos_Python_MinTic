
'''
En una fabrica de baldosas de cer√°mica se producen por d√≠a una gran cantidad de este producto.
Es importante hacer control de calidad sobre el producto. Este control consiste en revisar si en un
lote de N baldosas hay baldosas defectuosas (puede variar la textura o el color). La solicitud del
gerente de la planta es que se construya un programa en Python que pueda detectar la cantidad
de baldosas defectuosas en una de las l√≠neas de producci√≥n de la fabrica.

Para detectar si una baldosa es diferente a otra, un sensor escanea las baldosas y si hay alguna
diferencia, guarda un registro en la memoria. La memoria del sensor esta limitada por la cantidad
de baldosas que se producen en un intervalo de tiempo determinado

ENTRADA:
   La entrada estar√° formada por dos l√≠neas:
      -> La primera l√≠nea aparecer√° dos n√∫meros N y K que indican el n√∫mero de baldosas a revisar
         y el n√∫mero de baldosas que el sensor es capaz de guardar (1‚â§ N ‚â§ 1000, 1 ‚â§ K ‚â§ 1000)
      -> La segunda l√≠nea contiene M n√∫meros (entre 1 y 100) separados por espacios que
         representan las baldosas revisadas por el sensor
      -> Las baldosas se consideran defectuosas si est√°n representados por el mismo n√∫mero

SALIDA:
   El programa imprimir√° tres n√∫meros separados por un espacio.
      -> El primero representar√° el n√∫mero total de fallas detectadas
      -> El segundo representar√° la cantidad de fallas detectadas por el sensor considerando
         que al revisar una baldosa solo es capaz de guardar las ùêæ baldosas anteriores
      -> El tercero representa la cantidad de baldosas revisadas por el sensor
'''

# ----- Funci√≥n leerDatosPrimeraLinea() -----

def leerDatosPrimeraLinea() :
   n, k = input().split()           # Entrada de datos primer l√≠nea
   
   # Conversi√≥n de tipos
   n = int(n)                       # N√∫mero de baldosas a revisar
   k = int(k)                       # N√∫mero de baldosas que guarda el sensor

   return n, k                      # Valores que retorna


# ----- Funci√≥n leerDatosSegundaLinea() -----

def leerDatosSegundaLinea() :
   listaEnteros = []
   listaCaracteres = list(input().split(' '))      # Ingreso de las n baldosas
   for i in listaCaracteres :
      listaEnteros.append(int(i))                  # Llenar la lista con enteros
   return listaEnteros



# ----- Funci√≥n leerDatosSegundaLinea() -----

def detectarFallas(baldosas, k):
   fallasTotales = 0
   fallasSensor = 0
   diccionario = {}

   for i in baldosas :
      diccionario.update({i:baldosas.count(i)})    # Llenar el diccionario con los n√∫meros y repeticiones

   for clave, valor in diccionario.items() :       # Recorrer el diccionario para contar las fallas totales
      if valor > 1 :                               # Se repite como m√≠nimo una vez
         fallasTotales += valor - 1                # Se resta '1',  no debe tener en cuenta el que usa para comparar
   
   for a in range(len(baldosas)) :
      if a == 0 :                                  # No compara el primer valor, no tiene con quien
         continue

      existe = False                               # Bandera, se reinicia a 'False' en cada cambio de busqueda

      for b in range(len(baldosas)) :              # Recorrer doblemente la lista de baldosas
         if baldosas[a] == baldosas[b] and b < a and a - b <= k :    # (b < a) compara hasta antes del mismo elemento y (a - b <= k) representa m√°ximo 'k' elementos previos para comparar
            existe = True                          
         
      if existe :
         fallasSensor += 1                         # Solo suma al salir del ciclo anidado porque cuando se ingresa el mismo n√∫mero varias veces, dentro del ciclo sumaria muchas repeticiones
   
   return fallasTotales, fallasSensor



# ---------- Inicio del programa ----------

n, k = leerDatosPrimeraLinea()      # Llamado a la funci√≥n que leer√° los datos de la primera l√≠nea

baldosas = leerDatosSegundaLinea()  # Llamado a la funci√≥n que leer√° los datos de la segunda l√≠nea

fallasTotales, fallasSensor = detectarFallas(baldosas, k)

print(fallasTotales, fallasSensor, n)